
# EXPERIMENTOS 6,7,8
return hdbscan.HDBSCAN(
                min_cluster_size=trial.suggest_int('min_cluster_size', 10, 50),
                min_samples=trial.suggest_int('min_samples', 2, 15),
                #cluster_selection_epsilon=trial.suggest_float('cluster_selection_epsilon', 0.0, 1.0),
                metric=trial.suggest_categorical('metric', ['euclidean', 'manhattan', 'chebyshev']),
                cluster_selection_method=trial.suggest_categorical('cluster_selection_method',['eom','leaf']),
                gen_min_span_tree=trial.suggest_categorical('gen_min_span_tree', [True, False]),
                # Para garantizar determinismo.
                approx_min_span_tree=False
            )



 {
            "id": 6,
            "dino_model": "base",
            "optimizer" : "optuna",
            "optuna_trials": 200,
            "normalization": true,
            "scaler" : null,
            "dim_red" : "umap",
            "reduction_parameters": {
                "metric": ["euclidean","cosine"],
                "n_components": [2,3,4,5,7],
                "n_neighbors": [5, 10, 15, 20, 50],
                "min_dist": [0.1, 0.3, 0.5, 0.7]
            },
            "clustering" : "hdbscan",
            "eval_method" : "silhouette_noise",
            "penalty" : "range",
            "penalty_range" : [100, 400],
            "cache" : 1
        },
        {
            "id": 7,
            "dino_model": "base",
            "optimizer" : "optuna",
            "optuna_trials": 200,
            "normalization": true,
            "scaler" : "standard",
            "dim_red" : "umap",
            "reduction_parameters": {
                "metric": ["euclidean","cosine"],
                "n_components": [2,3,4,5,7],
                "n_neighbors": [5, 10, 15, 20, 50],
                "min_dist": [0.1, 0.3, 0.5, 0.7]
            },
            "clustering" : "hdbscan",
            "eval_method" : "davies_noise",
            "penalty" : "range",
            "penalty_range" : [100, 400],
            "cache" : 1
        }