


# EXPERIMENTOS 0,2,3,4,5

# def model_builder(trial):
#     return hdbscan.HDBSCAN(
#         min_cluster_size=trial.suggest_int('min_cluster_size', 2, 8),
#         min_samples=trial.suggest_int('min_samples', 2, 4),
#         cluster_selection_epsilon=trial.suggest_float('cluster_selection_epsilon', 0.3, 3),
#         metric=trial.suggest_categorical('metric', ['euclidean', 'manhattan', 'chebyshev']),
#         cluster_selection_method=trial.suggest_categorical('cluster_selection_method',['eom','leaf']),
#         gen_min_span_tree=trial.suggest_categorical('gen_min_span_tree', [True, False]),
#         # Para garantizar determinismo.
#         approx_min_span_tree=False
#     )


[

    {   
        "id": 0,
        "dino_model": "small",
        "optimizer" : "optuna",
        "optuna_trials": 400,
        "normalization": true,
        "scaler" : null,
        "dim_red" : "umap",
        "reduction_parameters": {
            "metric": ["cosine","euclidean"],
            "n_components": [2,3,4,5,7],
            "n_neighbors": [5, 10, 15, 20, 50],
            "min_dist": [0.1, 0.3, 0.5, 0.7]
        },
        "clustering" : "hdbscan",
        "eval_method" : "silhouette",
        "penalty" : null,
        "penalty_range" : null,
        "cache" : 1
    },
    {   
        "id": 2,
        "dino_model": "base",
        "optimizer" : "optuna",
        "optuna_trials": 200,
        "normalization": true,
        "scaler" : null,
        "dim_red" : "umap",
        "reduction_parameters": {
            "metric": ["cosine","euclidean"],
            "n_components": [2,3,4,5,7],
            "n_neighbors": [5, 10, 15, 20, 50],
            "min_dist": [0.1, 0.3, 0.5, 0.7]
        },
        "clustering" : "hdbscan",
        "eval_method" : "silhouette",
        "penalty" : null,
        "penalty_range" : null,
        "cache" : 1
    },
    {   
        "id": 3,
        "dino_model": "base",
        "optimizer" : "optuna",
        "optuna_trials": 200,
        "normalization": true,
        "scaler" : "standard",
        "dim_red" : "umap",
        "reduction_parameters": {
            "metric": ["cosine","euclidean"],
            "n_components": [2,3,4,5,7],
            "n_neighbors": [5, 10, 15, 20, 50],
            "min_dist": [0.1, 0.3, 0.5, 0.7]
        },
        "clustering" : "hdbscan",
        "eval_method" : "silhouette",
        "penalty" : null,
        "penalty_range" : null,
        "cache" : 1
    },
    {
        "id": 4,
        "dino_model": "base",
        "optimizer" : "optuna",
        "optuna_trials": 200,
        "normalization": true,
        "scaler" : null,
        "dim_red" : "umap",
        "reduction_parameters": {
            "metric": ["euclidean","cosine"],
            "n_components": [2,3,4,5,7],
            "n_neighbors": [5, 10, 15, 20, 50],
            "min_dist": [0.1, 0.3, 0.5, 0.7]
        },
        "clustering" : "hdbscan",
        "eval_method" : "davies_bouldin",
        "penalty" : null,
        "penalty_range" : null,
        "cache" : 1
    },
    {
        "id": 5,
        "dino_model": "base",
        "optimizer" : "optuna",
        "optuna_trials": 200,
        "normalization": true,
        "scaler" : "standard",
        "dim_red" : "umap",
        "reduction_parameters": {
            "metric": ["euclidean","cosine"],
            "n_components": [2,3,4,5,7],
            "n_neighbors": [5, 10, 15, 20, 50],
            "min_dist": [0.1, 0.3, 0.5, 0.7]
        },
        "clustering" : "hdbscan",
        "eval_method" : "davies_bouldin",
        "penalty" : null,
        "penalty_range" : null,
        "cache" : 1
    }
]
